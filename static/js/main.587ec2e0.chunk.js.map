{"version":3,"sources":["firebase.js","Header.js","NewEntry.js","EditToolbar.js","EditEntry.js","ConfirmDelete.js","Entry.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","className","direction","duration","htmlFor","type","id","icon","Component","NewEntry","selectedSymbol","e","radioButton","target","setState","currentSymbol","newEntryText","text","value","currentText","clearState","symbolValue","state","submit","this","props","onChange","name","placeholder","onClick","EditToolbar","toggleEdit","toggleComplete","toggleCancelled","toggleDelete","aria-label","EditEntry","handleEdit","console","log","updatedText","cancelEdit","preventDefault","displayEditForm","submitChanges","entryId","defaultValue","ConfirmDelete","cancelDelete","displayDeleteOptions","deleteEntry","Entry","showSymbol","chosenSymbol","toggleActive","isActive","needsEdit","isCompleted","isComplete","isCancelled","confirmDelete","toDelete","symbol","library","add","faCircleSolid","faCaretUp","faMinus","faAsterisk","faCircleRegular","faPencilAlt","faCheck","faBan","faTimes","App","addEntry","entry","newEntryObj","database","ref","push","newText","child","update","remove","entries","currentEntry","on","data","firebaseJournalObj","val","journalEntries","entryKey","entryVal","formattedJournal","unshift","map","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAcAA,IAASC,cAXc,CACnBC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,8CAMIR,QAAf,E,uCCyBeS,E,uKAnCP,OACI,wBAAQC,UAAU,SAAlB,SAEI,sBAAKA,UAAU,UAAf,UACI,cAAC,IAAD,CAAOC,UAAU,OAAOC,SAAS,OAAjC,SACI,iEAGJ,cAAC,IAAD,CAAOD,UAAU,KAAKC,SAAS,OAA/B,SACI,uBAAOC,QAAQ,aAAf,4BAEJ,uBAAOC,KAAK,WAAWC,GAAG,eAE1B,0BAASL,UAAU,WAAnB,UACI,+CACA,+BACI,wGACA,4OACA,8GACA,uDACA,qBAAIA,UAAU,eAAd,UACI,mGAAqE,cAAC,IAAD,CAAiBM,KAAK,eAA3F,eACA,8FAAgE,cAAC,IAAD,CAAiBA,KAAK,UAAtF,OACA,qFAAuD,cAAC,IAAD,CAAiBA,KAAK,QAA7E,wCACA,8FAAgE,cAAC,IAAD,CAAiBA,KAAK,UAAtF,8DAGR,uBAAOH,QAAQ,aAAaH,UAAU,QAAtC,+B,GA7BHO,aC6HNC,E,kDA7HX,aAAe,IAAD,8BACV,gBASJC,eAAiB,SAACC,GAEd,IAAMC,EAAcD,EAAEE,OAAOP,GAG7B,EAAKQ,SAAS,CACVC,cAAeH,KAhBT,EAqBdI,aAAe,SAACL,GAEZ,IAAMM,EAAON,EAAEE,OAAOK,MAGtB,EAAKJ,SAAS,CACVK,YAAaF,KA3BP,EA+BdG,WAAa,SAACC,GAEV,EAAKP,SAAS,CACVC,cAAe,GACfI,YAAa,MAjCjB,EAAKG,MAAQ,CAETP,cAAe,GACfI,YAAa,IALP,E,qDA0CJ,IAAD,OAGGI,EAAWC,KAAKC,MAAhBF,OAER,OACI,yBAAStB,UAAU,WAAnB,SACI,sBAAKA,UAAU,UAAf,UACI,2CACA,uBAAMA,UAAU,eAAhB,UACI,2BAAUyB,SAAUF,KAAKd,eAAzB,UACI,gDACA,uBACIL,KAAK,QACLsB,KAAK,cACLrB,GAAG,SAEP,wBAAOF,QAAQ,OAAf,UACI,cAAC,IAAD,CAAiBG,KAAK,WACtB,wCAGJ,uBACIF,KAAK,QACLsB,KAAK,cACLrB,GAAG,UAEP,wBAAOF,QAAQ,QAAf,UACI,cAAC,IAAD,CAAiBG,KAAM,CAAC,MAAO,YAC/B,yCAGJ,uBACIF,KAAK,QACLsB,KAAK,cACLrB,GAAG,gBAEP,wBAAOF,QAAQ,cAAf,UACI,cAAC,IAAD,CAAiBG,KAAK,aACtB,+CAGJ,uBACIF,KAAK,QACLsB,KAAK,cACLrB,GAAG,SAEP,wBAAOF,QAAQ,OAAf,UACI,cAAC,IAAD,CAAiBG,KAAK,UACtB,wCAGJ,uBACIF,KAAK,QACLsB,KAAK,cACLrB,GAAG,aAEP,wBAAOF,QAAQ,WAAf,UACI,cAAC,IAAD,CAAiBG,KAAK,aACtB,+CAGR,sBAAKN,UAAU,YAAf,UACI,uBAAOG,QAAQ,WAAf,8BACA,0BACIuB,KAAK,WACLrB,GAAG,WACHsB,YAAY,kBACZV,MAAOM,KAAKF,MAAMH,YAClBO,SAAUF,KAAKR,kBAGvB,wBAAQa,QAAS,SAAClB,GACdY,EAAOZ,EAAG,EAAKW,MAAMP,cAAe,EAAKO,MAAMH,aAC/C,EAAKC,WAAW,EAAKE,MAAMP,gBAF/B,mC,GAnHDP,aC0CRsB,E,uKAzCF,MAGiEN,KAAKC,MAAnEM,EAHH,EAGGA,WAAYC,EAHf,EAGeA,eAAgBC,EAH/B,EAG+BA,gBAAiBC,EAHhD,EAGgDA,aAErD,OACI,eAAC,WAAD,WAEI,wBACI9B,QAAQ,aACR+B,aAAW,aACXN,QAASE,EAHb,SAKI,cAAC,IAAD,CAAiBxB,KAAK,iBAE1B,wBACIH,QAAQ,iBACR+B,aAAW,iBACXN,QAASG,EAHb,SAKI,cAAC,IAAD,CAAiBzB,KAAK,YAE1B,wBACIH,QAAQ,eACR+B,aAAW,eACXN,QAASI,EAHb,SAKI,cAAC,IAAD,CAAiB1B,KAAK,UAE1B,wBACIH,QAAQ,eACR+B,aAAW,eACXN,QAASK,EAHb,SAKI,cAAC,IAAD,CAAiB3B,KAAK,mB,GAnChBC,aC+CX4B,E,kDA/CX,aAAe,IAAD,8BACV,gBAMJC,WAAa,SAAC1B,GAEV,IAAMM,EAAON,EAAEE,OAAOK,MACtBoB,QAAQC,IAAItB,GAEZ,EAAKH,SAAS,CACV0B,YAAavB,KAbP,EAkBdwB,WAAa,SAAC9B,GACVA,EAAE+B,kBAjBF,EAAKpB,MAAQ,CACTkB,YAAa,IAHP,E,qDAsBJ,IAAD,SAEwEhB,KAAKC,MAA1EkB,EAFH,EAEGA,gBAAiBxB,EAFpB,EAEoBA,YAAayB,EAFjC,EAEiCA,cAAeC,EAFhD,EAEgDA,QAASd,EAFzD,EAEyDA,WAE9D,OACI,uBAAM9B,UAAW0C,EAAjB,UACI,2DAEA,sBAAK1C,UAAU,WAAf,UACI,0BAAUK,GAAG,GAAGwC,aAAc3B,EAAaO,SAAUF,KAAKa,aAC1D,sBAAKpC,UAAU,cAAf,UACI,wBAAQ4B,QAAS,SAAClB,GACdiC,EAAcjC,EAAG,EAAKW,MAAMkB,YAAaK,GAAUd,KADvD,6BAGA,wBAAQF,QAAS,SAAClB,GACd,EAAK8B,WAAW9B,GAChBoB,KAFJ,yC,GArCAvB,aC2BTuC,E,4MAzBXC,aAAe,SAACrC,GACZA,EAAE+B,kB,uDAGI,IAAD,SAEgElB,KAAKC,MAAlEwB,EAFH,EAEGA,qBAAsBf,EAFzB,EAEyBA,aAAcgB,EAFvC,EAEuCA,YAAaL,EAFpD,EAEoDA,QAEzD,OACI,sBAAK5C,UAAWgD,EAAhB,UACI,6EACA,wBAAQpB,QAAS,SAAClB,GACd,EAAKqC,aAAarC,GAClBuC,EAAYL,GACZX,KAHJ,iBAKA,wBAAQL,QAAS,SAAClB,GACd,EAAKqC,aAAarC,GAClBuB,KAFJ,uB,GAlBY1B,aC6Hb2C,E,kDAxHX,aAAe,IAAD,8BACV,gBAgBJC,WAAa,SAACC,GACV,OAAQA,GACJ,IAAK,OACD,OAAO,cAAC,IAAD,CAAiB9C,KAAK,WACjC,IAAK,QACD,OAAO,cAAC,IAAD,CAAiBA,KAAM,CAAC,MAAO,YAC1C,IAAK,cACD,OAAO,cAAC,IAAD,CAAiBA,KAAK,aACjC,IAAK,OACD,OAAO,cAAC,IAAD,CAAiBA,KAAK,UACjC,IAAK,WACD,OAAO,cAAC,IAAD,CAAiBA,KAAK,aACjC,QACI,MAAO,uBA9BL,EAmCd+C,aAAe,WAEX,EAAKxC,SAAS,CACVyC,UAAW,EAAKjC,MAAMiC,YAtChB,EA2CdlB,WAAa,WAET,EAAKvB,SAAS,CACV0C,WAAY,EAAKlC,MAAMkC,aA9CjB,EAmDdC,YAAc,WAIV,EAAK3C,SAAS,CACV4C,YAAa,EAAKpC,MAAMoC,cAxDlB,EA6DdC,YAAc,WAIV,EAAK7C,SAAS,CACV6C,aAAc,EAAKrC,MAAMqC,eAlEnB,EAsEdC,cAAgB,WAEZ,EAAK9C,SAAS,CACV+C,UAAW,EAAKvC,MAAMuC,YAvE1B,EAAKvC,MAAQ,CAETiC,UAAU,EAEVC,WAAW,EAEXE,YAAY,EAEZC,aAAa,EAEbE,UAAU,GAZJ,E,qDA6EJ,IAAD,EAEoDrC,KAAKC,MAAtDnB,EAFH,EAEGA,GAAIwD,EAFP,EAEOA,OAAQ7C,EAFf,EAEeA,KAAM2B,EAFrB,EAEqBA,cAAeM,EAFpC,EAEoCA,YAEzC,OACI,qBAEIrB,QAASL,KAAK8B,aACdrD,UAAS,UAAMuB,KAAKF,MAAMoC,WAAc,YAAc,GAA7C,YAAoDlC,KAAKF,MAAMqC,YAAe,YAAc,IAHzG,UAKI,4BAAInC,KAAK4B,WAAWU,KACpB,4BAAI7C,IACJ,qBACIhB,UAAYuB,KAAKF,MAAMiC,SAAY,cAAgB,cADvD,SAGI,cAAC,EAAD,CACIrC,MAAOZ,EACPyB,WAAYP,KAAKa,WACjBL,eAAgBR,KAAKiC,YACrBxB,gBAAiBT,KAAKmC,YACtBzB,aAAcV,KAAKoC,kBAI3B,cAAC,EAAD,CACIjB,gBAAiBnB,KAAKF,MAAMkC,UAAY,WAAa,WACrDrC,YAAaF,EACb2B,cAAeA,EACfC,QAASvC,EACTyB,WAAYP,KAAKa,aAGrB,cAAC,EAAD,CACIY,qBAAsBzB,KAAKF,MAAMuC,SAAW,gBAAkB,WAC9D3B,aAAcV,KAAKoC,cACnBV,YAAaA,EACbL,QAASvC,MA9BRA,O,GApFDE,aCWpBuD,IAAQC,IAAIC,IAAeC,IAAWC,IAASC,IAAYC,IAAiBC,IAAaC,IAASC,IAAOC,K,IAuH1FC,E,kDAlHb,aAAe,IAAD,8BACZ,gBAuCFC,SAAW,SAAChE,EAAGmD,EAAQc,GAErBjE,EAAE+B,iBAGF,IAAMmC,EAAc,CAClBf,OAAQA,EACRc,MAAOA,GAIKrF,EAASuF,WAAWC,MAG5BC,KAAKH,IAtDC,EA0DdjC,cAAgB,SAACjC,EAAGsE,EAAS3E,GAE3BK,EAAE+B,iBAGYnD,EAASuF,WAAWC,MAG5BG,MAAM5E,GAAI6E,OAAO,CACrBP,MAAOK,KAnEG,EAwEd/B,YAAc,SAACL,GAECtD,EAASuF,WAAWC,MAC5BG,MAAMrC,GAASuC,UAzErB,EAAK9D,MAAQ,CAGX+D,QAAS,GAETC,aAAc,IAPJ,E,gEAWO,IAAD,OAGJ/F,EAASuF,WAAWC,MAG5BQ,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAqBD,EAAKE,MAG5BC,EAAiB,GACrB,IAAK,IAAIC,KAAYH,EAAoB,CACvC,IAAMI,EAAWJ,EAAmBG,GAC9BE,EAAmB,CACvBxF,GAAIsF,EACJ9B,OAAQ+B,EAAS/B,OACjBc,MAAOiB,EAASjB,OAElBe,EAAeI,QAAQD,GAIzB,EAAKhF,SAAS,CACZuE,QAASM,S,+BA4CL,IAAD,OACP,OACE,sBAAK1F,UAAU,MAAf,UACE,cAAC,EAAD,IAEA,iCAEE,cAAC,EAAD,CAAUsB,OAAQC,KAAKmD,WACvB,yBAAS1E,UAAU,sBAAnB,SAEE,6BAGIuB,KAAKF,MAAM+D,QAAQW,KAAI,SAACpB,GACtB,OAEE,aADA,CACC,EAAD,CACEtE,GAAIsE,EAAMtE,GACVwD,OAAQc,EAAMd,OACd7C,KAAM2D,EAAMA,MACZhC,cAAe,EAAKA,cACpBM,YAAa,EAAKA,wBAShC,iDAAmB,mBAAG+C,KAAK,2BAAR,oC,GA7GTzF,aCTH0F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.587ec2e0.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD81gW-6r5CYr7Joct3zjPL1Eryntb3RjY\",\n    authDomain: \"digibujoproject5.firebaseapp.com\",\n    databaseURL: \"https://digibujoproject5.firebaseio.com\",\n    projectId: \"digibujoproject5\",\n    storageBucket: \"digibujoproject5.appspot.com\",\n    messagingSenderId: \"897137595662\",\n    appId: \"1:897137595662:web:30fb6d9f801e90cefb735f\"\n};\n\n// initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Slide } from \"react-awesome-reveal\";\n\nclass Header extends Component {\n    render() { \n        return (\n            <header className=\"header\">\n                {/* animation idea: have heading drop in */}\n                <div className=\"wrapper\">\n                    <Slide direction=\"down\" duration=\"2500\">\n                        <h1>Welcome to your Digital BuJo!</h1>\n                    </Slide>\n                    {/* TODO stretch: \"Click here to get started!\" when starting to use routing; turn current Get Started button into an Information button */}\n                    <Slide direction=\"up\" duration=\"1500\">\n                        <label htmlFor=\"getStarted\">Get Started!</label>\n                    </Slide>\n                    <input type=\"checkbox\" id=\"getStarted\"/>\n                    {/* instructions for how the BuJo works */}\n                    <section className=\"howToUse\">\n                        <h2>How it Works:</h2>\n                        <ol>\n                            <li>Just like any other journal, let the Digital BuJo store your thoughts!</li>\n                            <li>In the \"New Entry\" section below, choose the symbol that best reflects the entry (e.g. is the entry a task that you need to complete, or an appointment you need to remember?) and add text to your entry.</li>\n                            <li>Click \"Add Entry\" and watch your new journal entry appear on the page below!</li>\n                            <li>To edit your entries:</li>\n                            <ol className=\"infoSublevel\">\n                                <li>If you made a typo, or need to add something the entry, click on <FontAwesomeIcon icon=\"pencil-alt\" /> to edit.</li>\n                                <li>If you have completed the task, check it off by clicking on <FontAwesomeIcon icon=\"check\" />.</li>\n                                <li>No longer have that appointment to go to? Click on <FontAwesomeIcon icon=\"ban\" /> to show that it's been cancelled.</li>\n                                <li>If you want to remove the entry from your journal, click on <FontAwesomeIcon icon=\"times\" />. WARNING: This will permanently delete the entry.</li>\n                            </ol>\n                        </ol>\n                        <label htmlFor=\"getStarted\" className=\"close\">Close</label>\n                    </section>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default Header;","import { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass NewEntry extends Component {\n    constructor() {\n        super()\n        this.state = {\n            // for the current entry that the user is inputting, store the symbol and text\n            currentSymbol: \"\",\n            currentText: \"\"\n        }\n    }\n\n    // method to store the radio button value from the form\n    selectedSymbol = (e) => {\n        // target the id of the selected radio input inside of the fieldset\n        const radioButton = e.target.id\n\n        // update the state of the currentSymbol\n        this.setState({\n            currentSymbol: radioButton\n        })\n    }\n\n    // method to store the text from the form\n    newEntryText = (e) => {\n        // store the text that the user has typed into the textarea\n        const text = e.target.value\n\n        // update the state of the currentText\n        this.setState({\n            currentText: text\n        })\n    }\n\n    clearState = (symbolValue) => {\n        // reset the currentSymbol and currentText to empty strings\n        this.setState({\n            currentSymbol: \"\",\n            currentText: \"\"\n        })\n\n        // TODO how to remove label styles once the state for the radio button has been set back to an empty string\n    }\n    \n    \n    render() { \n\n        // destructure props\n        const { submit } = this.props\n\n        return (\n            <section className=\"newEntry\">\n                <div className=\"wrapper\">\n                    <h2>New Entry</h2>\n                    <form className=\"newEntryForm\">\n                        <fieldset onChange={this.selectedSymbol}>\n                            <legend>Is this a:</legend>\n                            <input\n                                type=\"radio\"\n                                name=\"entrySymbol\"\n                                id=\"task\"\n                            />\n                            <label htmlFor=\"task\">\n                                <FontAwesomeIcon icon=\"circle\" />\n                                <p>Task</p>\n                            </label>\n        \n                            <input\n                                type=\"radio\"\n                                name=\"entrySymbol\"\n                                id=\"event\"\n                            />\n                            <label htmlFor=\"event\">\n                                <FontAwesomeIcon icon={[\"far\", \"circle\"]} />\n                                <p>Event</p>\n                            </label>\n        \n                            <input\n                                type=\"radio\"\n                                name=\"entrySymbol\"\n                                id=\"appointment\"\n                            />\n                            <label htmlFor=\"appointment\">\n                                <FontAwesomeIcon icon=\"caret-up\" />\n                                <p>Appointment</p>\n                            </label>\n        \n                            <input\n                                type=\"radio\"\n                                name=\"entrySymbol\"\n                                id=\"note\"\n                            />\n                            <label htmlFor=\"note\">\n                                <FontAwesomeIcon icon=\"minus\" />\n                                <p>Note</p>\n                            </label>\n        \n                            <input\n                                type=\"radio\"\n                                name=\"entrySymbol\"\n                                id=\"priority\"\n                            />\n                            <label htmlFor=\"priority\">\n                                <FontAwesomeIcon icon=\"asterisk\" />\n                                <p>Priority</p>\n                            </label>\n                        </fieldset>\n                        <div className=\"textEntry\">\n                            <label htmlFor=\"newEntry\">Add a New Entry:</label>\n                            <textarea\n                                name=\"newEntry\"\n                                id=\"newEntry\"\n                                placeholder=\"e.g. Today I...\"\n                                value={this.state.currentText}\n                                onChange={this.newEntryText}>\n                            </textarea>\n                        </div>\n                        <button onClick={(e) => {\n                            submit(e, this.state.currentSymbol, this.state.currentText);\n                            this.clearState(this.state.currentSymbol)\n                        }}>Add Entry</button>\n                    </form>\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default NewEntry;","import { Component, Fragment } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass EditToolbar extends Component {\n    render() {\n\n        // destructure props\n        const { toggleEdit, toggleComplete, toggleCancelled, toggleDelete } = this.props\n\n        return (\n            <Fragment>\n                {/* REVIEW turn these back into buttons? */}\n                <button \n                    htmlFor=\"editButton\"\n                    aria-label=\"edit entry\"\n                    onClick={toggleEdit}\n                >\n                    <FontAwesomeIcon icon=\"pencil-alt\" />\n                </button>\n                <button\n                    htmlFor=\"completeButton\"\n                    aria-label=\"complete entry\"\n                    onClick={toggleComplete}\n                >\n                    <FontAwesomeIcon icon=\"check\" />\n                </button>\n                <button\n                    htmlFor=\"cancelButton\"\n                    aria-label=\"cancel entry\"\n                    onClick={toggleCancelled}\n                >\n                    <FontAwesomeIcon icon=\"ban\" />\n                </button>\n                <button\n                    htmlFor=\"deleteButton\"\n                    aria-label=\"delete entry\"\n                    onClick={toggleDelete}\n                >\n                    <FontAwesomeIcon icon=\"times\" />\n                </button>\n            </Fragment>\n        )\n    }\n}\n\nexport default EditToolbar;","import { Component } from \"react\";\n\nclass EditEntry extends Component {\n    constructor() {\n        super()\n        this.state = {\n            updatedText: \"\"\n        }\n    }\n\n    handleEdit = (e) => {\n        // store the text that the user has typed into the textarea\n        const text = e.target.value\n        console.log(text);\n\n        this.setState({\n            updatedText: text\n        })\n    }\n\n    // prevent the default behaviour from occurring when the cancel button has been clicked\n    cancelEdit = (e) => {\n        e.preventDefault()\n    }\n    \n    render() { \n\n        const { displayEditForm, currentText, submitChanges, entryId, toggleEdit } = this.props\n\n        return (\n            <form className={displayEditForm}>\n                <h3>Add Changes to Your Entry</h3>\n                {/* REVIEW: no placeholder text; just data from the firebase database? */}\n                <div className=\"flexEdit\">\n                    <textarea id=\"\" defaultValue={currentText} onChange={this.handleEdit}></textarea>\n                    <div className=\"flexButtons\">\n                        <button onClick={(e) => {\n                            submitChanges(e, this.state.updatedText, entryId); toggleEdit()\n                        }}>Confirm Changes</button>\n                        <button onClick={(e) => {\n                            this.cancelEdit(e)\n                            toggleEdit()\n                        }}>Cancel Changes</button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default EditEntry;","import { Component } from \"react\";\n\nclass ConfirmDelete extends Component {\n    // prevent the default behaviour from occurring when the no button has been clicked\n    cancelDelete = (e) => {\n        e.preventDefault()\n    }\n    \n    render() {\n\n        const { displayDeleteOptions, toggleDelete, deleteEntry, entryId } = this.props;\n\n        return (\n            <div className={displayDeleteOptions}>\n                <h3>Are you sure you want to delete this entry?</h3>\n                <button onClick={(e) => {\n                    this.cancelDelete(e);\n                    deleteEntry(entryId)\n                    toggleDelete()\n                }}>Yes</button>\n                <button onClick={(e) => {\n                    this.cancelDelete(e);\n                    toggleDelete()\n                }}>No</button>\n            </div>\n        )\n    }\n}\n\nexport default ConfirmDelete;","import { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport EditToolbar from \"./EditToolbar.js\";\nimport EditEntry from \"./EditEntry.js\";\nimport ConfirmDelete from \"./ConfirmDelete.js\";\n\nclass Entry extends Component {\n    constructor() {\n        super()\n        this.state = {\n            // show/hide EditToolbar\n            isActive: false,\n            // show/hide edit form\n            needsEdit: false,\n            // show/hide completed styles\n            isComplete: false,\n            // show/hide cancelled styles\n            isCancelled: false,\n            // show/hide delete confirmation dropdown\n            toDelete: false\n        }\n    }\n\n    // show the chosen symbol in the journal entry\n    showSymbol = (chosenSymbol) => {\n        switch (chosenSymbol) {\n            case \"task\":\n                return <FontAwesomeIcon icon=\"circle\" />;\n            case \"event\":\n                return <FontAwesomeIcon icon={[\"far\", \"circle\"]} />;\n            case \"appointment\":\n                return <FontAwesomeIcon icon=\"caret-up\" />;\n            case \"note\":\n                return <FontAwesomeIcon icon=\"minus\" />;\n            case \"priority\":\n                return <FontAwesomeIcon icon=\"asterisk\" />;\n            default:\n                return \"No symbols matched\";\n        }\n    }\n\n    // reveal the editButtons container when the list item has been clicked on\n    toggleActive = () => {\n        // change the active state of the EditToolbar component to determine whether it can be seen by the user or should be hidden when the user clicks on the list item\n        this.setState({\n            isActive: !this.state.isActive\n        })\n    }\n\n    // allow the user to edit the content in the entry\n    handleEdit = () => {\n        // change the state of needsEdit to be the opposite\n        this.setState({\n            needsEdit: !this.state.needsEdit\n        })\n    }\n\n    // allow the user to determine when the task has been completed\n    isCompleted = () => {\n        // TODO checkmark icon overlaps the entry's symbol\n\n        // change the state of isComplete to be the opposite\n        this.setState({\n            isComplete: !this.state.isComplete\n        })\n    }\n\n    // allow user to cross out an entry that no longer need to be carried out\n    isCancelled = () => {\n        // TODO cancel icon overlaps the entry's symbol\n\n        // change the state of isCancelled to be the opposite\n        this.setState({\n            isCancelled: !this.state.isCancelled\n        })\n    }\n\n    confirmDelete = () => {\n        // change the state of toDelete to be the opposite\n        this.setState({\n            toDelete: !this.state.toDelete\n        })\n    }\n    \n    render() {\n\n        const { id, symbol, text, submitChanges, deleteEntry } = this.props\n\n        return (\n            <li\n                key={id}\n                onClick={this.toggleActive}\n                className={`${(this.state.isComplete) ? \"completed\" : \"\"} ${(this.state.isCancelled) ? \"cancelled\" : \"\"}`}\n            >\n                <i>{this.showSymbol(symbol)}</i>\n                <p>{text}</p>\n                <div\n                    className={(this.state.isActive) ? \"showButtons\" : \"hideButtons\"}\n                >\n                    <EditToolbar\n                        value={id}\n                        toggleEdit={this.handleEdit}\n                        toggleComplete={this.isCompleted}\n                        toggleCancelled={this.isCancelled}\n                        toggleDelete={this.confirmDelete}\n                    />\n                </div>\n                {/* form component for edit */}\n                <EditEntry\n                    displayEditForm={this.state.needsEdit ? \"editForm\" : \"hideForm\"}\n                    currentText={text}\n                    submitChanges={submitChanges}\n                    entryId={id}\n                    toggleEdit={this.handleEdit}\n                    />\n                {/* option to confirm deleting an entry */}\n                <ConfirmDelete\n                    displayDeleteOptions={this.state.toDelete ? \"confirmDelete\" : \"hideForm\"}\n                    toggleDelete={this.confirmDelete}\n                    deleteEntry={deleteEntry}\n                    entryId={id}\n                />\n            </li>\n        )\n    }\n}\n\nexport default Entry;","import { Component } from 'react';\nimport './sass/App.scss';\n\n// import firebase\nimport firebase from \"./firebase.js\";\n\n// import Font Awesome and initialize library\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCircle as faCircleSolid, faCaretUp, faMinus, faAsterisk, faPencilAlt, faCheck, faBan, faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as faCircleRegular } from \"@fortawesome/free-regular-svg-icons\";\n\n// components\nimport Header from \"./Header.js\";\nimport NewEntry from \"./NewEntry.js\";\nimport Entry from \"./Entry.js\";\n\n// store Font Awesome icons in the imported library\nlibrary.add(faCircleSolid, faCaretUp, faMinus, faAsterisk, faCircleRegular, faPencilAlt, faCheck, faBan, faTimes);\n\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      // keep track of journal entries\n      // TODO add a completed (boolean) and cancelled (boolean) to each object in the database and update them when the respective buttons have been clicked\n      entries: [],\n      // after turning the current symbol and text into an object, store it in state\n      currentEntry: {}\n    }\n  }\n\n  componentDidMount() {\n    // make a reference to the firebase database\n      // REVIEW when setting up multiple users\n    const dbRef = firebase.database().ref()\n\n    // retrieve data from the database and update the entries state to hold that data\n    dbRef.on(\"value\", (data) => {\n      const firebaseJournalObj = data.val()\n\n      // transform the firebase object into an array\n      let journalEntries = []\n      for (let entryKey in firebaseJournalObj) {\n        const entryVal = firebaseJournalObj[entryKey]\n        const formattedJournal = {\n          id: entryKey,\n          symbol: entryVal.symbol,\n          entry: entryVal.entry\n        }\n        journalEntries.unshift(formattedJournal)\n      }\n\n      // update state\n      this.setState({\n        entries: journalEntries\n      })\n    })\n  }\n\n  // add a new entry to the firebase database so it can be rendered on the page\n  addEntry = (e, symbol, entry) => {\n    // prevent default behaviour\n    e.preventDefault()\n\n    // turn the chosen symbol and text into a new object\n    const newEntryObj = {\n      symbol: symbol,\n      entry: entry\n    }\n\n    // make a reference to the firebase database\n    const dbRef = firebase.database().ref()\n\n    // add the new entry object to the firebase database\n    dbRef.push(newEntryObj)\n  }\n\n  // when the \"Confirm Changes\" button in the EditEntry form is clicked update the firebase database and state, then render the new data onto the page\n  submitChanges = (e, newText, id) => {\n    // prevent default behaviour\n    e.preventDefault()\n\n    // firebase database reference\n    const dbRef = firebase.database().ref()\n\n    // update the specific entry's text\n    dbRef.child(id).update({\n      entry: newText\n    })\n  }\n\n  // allow the user to delete entries that they no longer want to keep\n  deleteEntry = (entryId) => {\n    // remove the entry from the firebase database\n    const dbRef = firebase.database().ref()\n    dbRef.child(entryId).remove()\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <main>\n          {/* use props to pass methods to the NewEntry class component */}\n          <NewEntry submit={this.addEntry} />\n          <section className=\"bujoEntries wrapper\">\n            {/* this is where entries stored in the firebase database will be populated */}\n            <ul>\n              {/* TODO: ability to edit, complete/cancel, and remove entries */}\n              {\n                this.state.entries.map((entry) => {\n                  return (\n                    // NOTE every list item has been given a unique key in the Entry component\n                    <Entry\n                      id={entry.id}\n                      symbol={entry.symbol}\n                      text={entry.entry}\n                      submitChanges={this.submitChanges}\n                      deleteEntry={this.deleteEntry}\n                    />\n                  )\n                })\n              }\n            </ul>\n          </section>\n        </main>\n\n        <footer>Created at <a href=\"https://junocollege.com/\">Juno College</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}