{"version":3,"sources":["firebase.js","NewEntry.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NewEntry","selectedSymbol","e","radioButton","target","id","setState","currentSymbol","newEntryText","text","value","currentText","state","submit","this","props","className","action","onChange","type","name","htmlFor","icon","placeholder","onClick","Component","library","add","faCircleSolid","faCaretUp","faMinus","faAsterisk","faCircleRegular","App","addEntry","symbol","entry","preventDefault","newEntryObj","database","ref","push","showSymbol","chosenSymbol","editEntry","completeEntry","cancelEntry","deleteEntry","entries","currentEntry","on","data","firebaseJournalObj","val","journalEntries","entryKey","entryVal","formattedJournal","unshift","map","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.798bd50a.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyD81gW-6r5CYr7Joct3zjPL1Eryntb3RjY\",\n    authDomain: \"digibujoproject5.firebaseapp.com\",\n    databaseURL: \"https://digibujoproject5.firebaseio.com\",\n    projectId: \"digibujoproject5\",\n    storageBucket: \"digibujoproject5.appspot.com\",\n    messagingSenderId: \"897137595662\",\n    appId: \"1:897137595662:web:30fb6d9f801e90cefb735f\"\n};\n\n// initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass NewEntry extends Component {\n    constructor() {\n        super()\n        this.state = {\n            // for the current entry that the user is inputting, store the symbol and text\n            currentSymbol: \"\",\n            currentText: \"\"\n        }\n    }\n\n    // method to store the radio button value from the form\n    selectedSymbol = (e) => {\n        // target the id of the selected radio input inside of the fieldset\n        const radioButton = e.target.id\n\n        // update the state of the currentSymbol\n        this.setState({\n            currentSymbol: radioButton\n        })\n    }\n\n    // method to store the text from the form\n    newEntryText = (e) => {\n        // store the text that the user has typed into the textarea\n        const text = e.target.value\n\n        // update the state of the currentText\n        this.setState({\n            currentText: text\n        })\n    }\n    \n    \n    render() { \n\n        // destructure props\n        const { submit } = this.props\n\n        return (\n            <section className=\"newEntry\">\n                <form action=\"\" className=\"newEntryForm wrapper\">\n                    <fieldset onChange={this.selectedSymbol}>\n                        <legend>Is this a:</legend>\n                        <input type=\"radio\" name=\"entrySymbol\" id=\"task\" />\n                        <label htmlFor=\"task\">\n                            <FontAwesomeIcon icon=\"circle\" />\n                            <p>Task</p>\n                        </label>\n    \n                        <input type=\"radio\" name=\"entrySymbol\" id=\"event\" />\n                        <label htmlFor=\"event\">\n                            <FontAwesomeIcon icon={[\"far\", \"circle\"]} />\n                            <p>Event</p>\n                        </label>\n    \n                        <input type=\"radio\" name=\"entrySymbol\" id=\"appointment\" />\n                        <label htmlFor=\"appointment\">\n                            <FontAwesomeIcon icon=\"caret-up\" />\n                            <p>Appointment</p>\n                        </label>\n    \n                        <input type=\"radio\" name=\"entrySymbol\" id=\"note\" />\n                        <label htmlFor=\"note\">\n                            <FontAwesomeIcon icon=\"minus\" />\n                            <p>Note</p>\n                        </label>\n    \n                        <input type=\"radio\" name=\"entrySymbol\" id=\"priority\" />\n                        <label htmlFor=\"priority\">\n                            <FontAwesomeIcon icon=\"asterisk\" />\n                            <p>Priority</p>\n                        </label>\n                    </fieldset>\n                    <div className=\"textEntry\">\n                        <label htmlFor=\"newEntry\">Add a New Entry:</label>\n                        <textarea name=\"newEntry\" id=\"newEntry\" placeholder=\"e.g. Today I...\" onChange={this.newEntryText}></textarea>\n                    </div>\n                    <button onClick={(e) => {submit(e, this.state.currentSymbol, this.state.currentText)}}>Add Entry</button>\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default NewEntry;","import { Component } from 'react';\nimport './sass/App.scss';\n// import firebase\nimport firebase from \"./firebase.js\";\n// import Font Awesome and initialize library\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faCircle as faCircleSolid, faCaretUp, faMinus, faAsterisk } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCircle as faCircleRegular } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// components\nimport NewEntry from \"./NewEntry.js\";\n\n// store Font Awesome icons in the imported library\nlibrary.add(faCircleSolid, faCaretUp, faMinus, faAsterisk, faCircleRegular);\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      // keep track of journal entries\n      entries: [],\n      \n      // after turning the current symbol and text into an object, store it in state\n      currentEntry: {}\n    }\n  }\n\n  componentDidMount() {\n    // make a reference to the firebase database\n      // REVIEW this will be for when the user logs back in/reloads the page\n    const dbRef = firebase.database().ref()\n\n    // retrieve data from the database and update the entries state to hold that data\n    dbRef.on(\"value\", (data) => {\n      const firebaseJournalObj = data.val()\n\n      // transform the firebase object into an array\n      let journalEntries = []\n      for (let entryKey in firebaseJournalObj) {\n        const entryVal = firebaseJournalObj[entryKey]\n        const formattedJournal = {\n          id: entryKey,\n          symbol: entryVal.symbol,\n          entry: entryVal.entry\n        }\n        journalEntries.unshift(formattedJournal)\n      }\n\n      // update state\n      this.setState({\n        entries: journalEntries\n      })\n    })\n  }\n\n  addEntry = (e, symbol, entry) => {\n    // prevent default behaviour\n    e.preventDefault()\n\n    // turn the chosen symbol and text into a new object\n    const newEntryObj = {\n      symbol: symbol,\n      entry: entry\n    }\n\n    // make a reference to the firebase database\n    const dbRef = firebase.database().ref()\n\n    // add the new entry object to the firebase database\n    dbRef.push(newEntryObj)\n  }\n\n  // show the chosen symbol in the journal entry\n  showSymbol = (chosenSymbol) => {\n    switch(chosenSymbol) {\n      case \"task\":\n        return <FontAwesomeIcon icon=\"circle\" />;\n      case \"event\":\n        return <FontAwesomeIcon icon={[\"far\", \"circle\"]} />;\n      case \"appointment\":\n        return <FontAwesomeIcon icon=\"caret-up\" />;\n      case \"note\":\n        return <FontAwesomeIcon icon=\"minus\" />;\n      case \"priority\":\n        return <FontAwesomeIcon icon=\"asterisk\" />;\n    }\n  }\n\n  editEntry = () => {\n\n  }\n\n  completeEntry = () => {\n\n  }\n\n  cancelEntry = () => {\n\n  }\n\n  deleteEntry = () => {\n\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"header\">\n          {/* animation idea: have heading drop in */}\n          <h1>Welcome to your DigiBuJo!</h1>\n          {/* TODO include instructions for how the BuJo works */}\n          {/* TODO stretch: \"Click here to get started!\" */}\n        </header>\n\n        <main>\n          {/* use props to pass methods to the NewEntry class component */}\n          <NewEntry \n            submit={this.addEntry}\n          />\n          <section className=\"bujoEntries wrapper\">\n            {/* this is where entries stored in the firebase database will be populated */}\n            <ul>\n              {/* TODO: ability to edit, complete/cancel, and remove entries */}\n              {\n                this.state.entries.map((entry) => {\n                  return (\n                    <li key={entry.id}>\n                      <i>{this.showSymbol(entry.symbol)}</i>\n                      <p>{entry.entry}</p>\n                      <div className=\"editButtons\">\n                        <button onClick={this.editEntry}>Edit Entry</button>\n                        <button onClick={this.completeEntry}>Complete Entry</button>\n                        <button onClick={this.cancelEntry}>Cancel Entry</button>\n                        <button onClick={this.deleteEntry}>Delete Entry</button>\n                        </div>\n                    </li>\n                  )\n                })\n              }\n            </ul>\n          </section>\n        </main>\n\n        <footer>Created at <a href=\"https://junocollege.com/\">Juno College</a></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}